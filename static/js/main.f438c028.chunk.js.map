{"version":3,"sources":["Pokeman.js","data.js","ColorChange.js","Todo.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["Pokecard","name","type","image","className","src","alt","Pokedex","data","pokemon","map","id","defaultProps","colors","Box","color","onClick","e","target","style","background","Math","floor","random","length","ColorChange","Component","list","task","isComplete","Todo","checked","TodoList","Home","to","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f438c028.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Proptype from \"prop-types\";\r\nimport data from \"./data\";\r\n\r\nconst Pokecard = ({name, type, image}) => {\r\n  return (\r\n    <div className=\"pokecard\">\r\n      <h2>{name}</h2>\r\n      <img src={image} alt=\"pokedex_image\"/>\r\n      <p>Type: {type}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nPokecard.propTypes = {\r\n  name: Proptype.string,\r\n  type: Proptype.string,\r\n  image: Proptype.string\r\n}\r\nconst Pokedex = ({data}) => {\r\n  return (\r\n    <div>\r\n      <h1>Pokemon List</h1>\r\n      <div className=\"pokedex\">\r\n        {\r\n          data.pokemon.map(({id, type, image,name}) => <Pokecard key={id} name={name} type={type} image={image} />)\r\n        }\r\n      </div> \r\n    </div>\r\n  )\r\n}\r\n\r\nPokedex.defaultProps = { data };\r\n\r\nexport default Pokedex;","const data = {\r\n  pokemon: [\r\n    {\r\n      id: 1,\r\n      name: \"Charmander\",\r\n      type: \"fire\",\r\n      image: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\"\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Squirtle\",\r\n      type: \"water\",\r\n      image: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\"\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Butterfree\",\r\n      type: \"flying\",\r\n      image: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/12.png\"\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Rattata\",\r\n      type: \"normal\",\r\n      image: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/19.png\"\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"Metapod\",\r\n      type: \"bug\",\r\n      image: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/11.png\"\r\n    }\r\n  ]\r\n}\r\n\r\nexport default data;","import React, { Component } from \"react\";\r\n\r\nconst colors = [\r\n  \"blue\",\r\n  \"red\",\r\n  \"orange\",\r\n  \"gold\",\r\n  \"purple\",\r\n  \"silver\",\r\n  \"black\",\r\n  \"grey\",\r\n  \"yellow\",\r\n  \"green\",\r\n  \"tomato\",\r\n  \"brown\",\r\n  \"blueviolet\",\r\n  \"chocolate\",\r\n  \"white\",\r\n];\r\nconst Box = ({ color }) => {\r\n  const handleClick = (e) => {\r\n    e.target.style.background =\r\n      colors[Math.floor(Math.random() * colors.length)];\r\n  };\r\n  return (\r\n    <div\r\n      onClick={handleClick}\r\n      className=\"color\"\r\n      style={{ background: color }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport class ColorChange extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"box-container\">\r\n        <Box color={\"blue\"} />\r\n        <Box color={\"red\"} />\r\n        <Box color={\"orange\"} />\r\n        <Box color={\"gold\"} />\r\n        <Box color={\"purple\"} />\r\n        <Box color={\"black\"} />\r\n        <Box color={\"grey\"} />\r\n        <Box color={\"brown\"} />\r\n        <Box color={\"yellow\"} />\r\n        <Box color={\"green\"} />\r\n        <Box color={\"deepskyblue\"} />\r\n        <Box color={\"blueviolet\"} />\r\n        <Box color={\"aquamarine\"} />\r\n        <Box color={\"chocolate\"} />\r\n        <Box color={\"teal\"} />\r\n        <Box color={\"tomato\"} />\r\n        <Box color={\"salmon\"} />\r\n        <Box color={\"saddlebrown\"} />\r\n        <Box color={\"pink\"} />\r\n        <Box color={\"peachplum\"} />\r\n        <Box color={\"darkblue\"} />\r\n        <Box color={\"darkmagenta\"} />\r\n        <Box color={\"crimson\"} />\r\n        <Box color={\"goldenrod\"} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColorChange;\r\n","import React from 'react'\r\nconst list = [\r\n  {\r\n    id: 1,\r\n    task: \"Wash Cloth\",\r\n    isComplete: true\r\n  },\r\n  {\r\n    id: 2,\r\n    task: \"Take out the trash\",\r\n    isComplete: true\r\n  },\r\n  {\r\n    id: 3,\r\n    task: \"Shopping\",\r\n    isComplete: false\r\n  },\r\n  {\r\n    id: 4,\r\n    task: \"Listen to Music\",\r\n    isComplete: true\r\n  },\r\n  {\r\n    id: 5,\r\n    task: \"Call HR\",\r\n    isComplete: false\r\n  },\r\n];\r\n\r\nconst Todo = ({task, isComplete}) => {\r\n  return (\r\n    <div className=\"todo\">\r\n      <input type=\"checkbox\" name=\"isComplete\" checked={isComplete} />\r\n      <span className={isComplete ? \"isComplete\": \"\"}>{task}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TodoList = () => {\r\n  return (\r\n    <div>\r\n      <h1>Todo List</h1>\r\n      {\r\n        list.map(({id, task, isComplete}) => <Todo key={id} task={task} isComplete={isComplete} />)\r\n      }\r\n    </div>\r\n  )\r\n}\r\nexport default TodoList;\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"exercise\">\r\n      <h2>Exercise</h2>\r\n      <p><Link to={\"/pokemon\"}>Take One</Link> </p>\r\n      <p><Link to={\"/boxes\"}>Take Two</Link> </p>\r\n      <p><Link to={\"/todo\"}>Take Three</Link> </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import './App.css';\nimport Pokedex from './Pokeman';\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport { ColorChange } from './ColorChange';\nimport TodoList from './Todo';\nimport Home from './Home';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route exact path={\"/\"} component={Home} />\n          <Route exact path={\"/pokemon\"} component={Pokedex} />\n          <Route exact path={\"/boxes\"} component={ColorChange} />\n          <Route exact path={\"/todo\"} component={TodoList} />\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}